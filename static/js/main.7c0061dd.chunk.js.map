{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/layout/Header.js","components/AddTodo.js","components/SearchTodo.js","components/layout/Tabs.js","data/Todos.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","this","id","title","style","className","type","onChange","markComplete","bind","onClick","deleteItem","Component","TodoList","todos","map","listItem","key","Header","AddTodoList","state","ev","setState","target","name","value","onSubmit","preventDefault","addTodoItem","placeholder","btnSubmit","flex","SearchTodo","searchItem","label","activeLabel","borderColor","Tabs","activeIndex","defaultIndex","tabs","React","Children","children","child","index","btnStyle","filterView","TodoContent","uuid","v4","href","Tab","App","searchedItems","filterViews","searchKeyword","newTodo","deleteTodoItem","filter","word","todoItem","toLowerCase","includes","result","val","AddTodo","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c0061dd.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component{\n\n    getStyle= () =>{\n        return {\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n        }\n    };\n\n    render() {\n        const {id, title} = this.props.todo;\n        return(\n            <div style={this.getStyle()} className='itemList'>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>\n                    {title}\n                    <button onClick={this.props.deleteItem.bind(this, id)} className='btnStyle'>X</button>\n                </p>\n            </div>\n        )\n    }\n}\n\nTodoItem.propTypes = {\n    onChange : PropTypes.func,\n    onClick: PropTypes.func\n};\n\nexport default TodoItem;","import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\n\nimport TodoItem from \"./TodoItem\";\n\nclass TodoList extends Component{\n    render() {\n        return (\n            this.props.todos.map((listItem) =>(\n            // console.log(listItem)\n            <TodoItem key={listItem.id} todo={listItem} markComplete={this.props.markComplete} deleteItem={this.props.deleteItem}/>\n            ))\n        );\n    }\n}\n\nTodoList.propTypes = {\n    markComplete : PropTypes.func,\n    deleteItem : PropTypes.func\n}\n\nexport default TodoList;","import React from \"react\";\n\n\nfunction Header() {\n\n    return(\n        <header className='headerStyle'>\n            <h1>Todo List</h1>\n        </header>\n\n    )\n}\n\n\nexport default Header;","import React, {Component} from \"react\";\n\nimport PropTypes from 'prop-types';\n\nclass AddTodoList extends Component{\n    state = {\n        title:''\n    };\n\n    onChange = (ev) => this.setState(\n        {\n            [ev.target.name]: ev.target.value\n        }\n    );\n\n\n    onSubmit = (ev) =>{\n        ev.preventDefault();\n        this.props.addTodoItem(this.state.title);\n        this.setState({ title: ''})\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.onSubmit}  className='formStyle'>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder='Add Todo ....'\n                    className='inputStyle'\n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n\n                <input type=\"submit\" value=\"Submit\" style={btnSubmit} className=\"btn\"/>\n            </form>\n        )\n    }\n}\n\nconst btnSubmit = {\n    flex : '1'\n};\n\nAddTodoList.propTypes ={\n    value : PropTypes.string\n}\n\nexport default AddTodoList;","import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\n\nclass SearchTodo extends Component{\n    render() {\n        return(\n            <div className='searchBarStyle'>\n                <input\n                    type=\"text\"\n                    placeholder='Search ....'\n                    className='searchStyle'\n                    onChange={this.props.searchItem}\n                />\n            </div>\n\n        )\n    }\n}\n\nSearchTodo.propTypes = {\n  searchedItem: PropTypes.array\n};\n\nexport default SearchTodo;","import React, {Component} from \"react\";\n\nlet label = {};\n\nlet activeLabel = {\n    borderColor: \"red\"\n};\n\nclass Tabs extends Component{\n\n    state = {\n        activeIndex: this.props.defaultIndex || 0\n    };\n\n    render() {\n        let { activeIndex } = this.state;\n\n        let tabs = React.Children.map(this.props.children, (child, index )=>{\n            let btnStyle = activeIndex === index ? activeLabel : label;\n\n            return(\n                <button\n                    style={btnStyle}\n                    className= 'tabButton'\n                    onClick={() => {this.setState({activeIndex: index}); this.props.filterView(index)}}>\n                    {child.props.label}\n                </button>\n            )\n        });\n\n        return(\n            <div className='tabStyle'>\n                <div className= 'tabStyle__tabs'>{tabs}</div>\n                {this.props.children[this.state.activeIndex]}\n            </div>\n        )\n    }\n}\n\nexport default Tabs;","import uuid from \"uuid\";\n\nconst TodoContent = [\n    {\n        id: uuid.v4(),\n        title: 'Take the trash',\n        completed: false,\n    },\n    {\n        id: uuid.v4(),\n        title: 'Clean Room',\n        completed: false,\n    },\n    {\n        id: uuid.v4(),\n        title: 'Meeting in the morning',\n        completed: false,\n    },\n    {\n        id: uuid.v4(),\n        title: 'Do Shopping',\n        completed: false,\n    }\n]\n\n\nexport default TodoContent;","import React from \"react\";\n\n\nfunction Header() {\n\n    return(\n        <footer className='footerStyle'>\n            <div className='container '>\n                <div className='row mt-3'>\n                    <div className='col-8'>\n                        <h1>\n                            <a href=\"https://jumpbangs.github.io/react_todo/\">\n                                Todo List\n                            </a>\n                        </h1>\n                    </div>\n                    <div className='col-3'>\n                        <ul>\n                            <li>\n                                <a href=\"https://github.com/jumpbangs/react_todo\">\n                                    Github Repo Page\n                                </a>\n\n                            </li>\n                            <li>\n                                Links\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </footer>\n\n    )\n}\n\n\nexport default Header;","import React, { Component} from 'react';\nimport './styles/App.css';\nimport './styles/bootstrap-grid.min.css'\n\n//Import from Components\nimport TodoList from \"./components/TodoList\";\nimport Header from \"./components/layout/Header\";\nimport AddTodoList from \"./components/AddTodo\";\nimport SearchTodo from \"./components/SearchTodo\";\nimport Tabs from \"./components/layout/Tabs\";\n\nimport TodoContent from \"./data/Todos\";\nimport uuid from 'uuid';\nimport Footer from \"./components/layout/Footer\";\n\n\nconst Tab = ({children}) => <div>{children}</div>;\n\nclass App extends Component{\n\n    state = {\n        todos: TodoContent,\n        searchedItems : TodoContent,\n        filterViews :'all',\n        searchKeyword:''\n    };\n\n\n    markComplete = (id) => {\n        this.setState({\n            todos:this.state.todos.map(todo=>{\n                if(todo.id === id){\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            })\n        })\n    };\n\n    addTodoItem = (title) => {\n        const newTodo = {\n            id: uuid.v4(),\n            title,\n            completed: false,\n        };\n\n        if(title){\n            this.setState({todos:[...this.state.todos, newTodo]})\n            this.setState({searchedItems:[...this.state.searchedItems, newTodo]})\n        }\n    };\n\n    deleteTodoItem = (id) =>{\n        this.setState({todos:[...this.state.todos.filter(todo => todo.id !== id)]});\n        this.setState({searchedItems:[...this.state.searchedItems.filter(todo => todo.id !== id)]});\n    };\n\n    searchItem = (ev) => {\n        let word = ev.target.value;\n        this.setState({\n            searchKeyword: word,\n            searchedItems:this.state.todos.filter((todoItem) =>{\n\n                return todoItem.title.toLowerCase().includes(word.toLowerCase());\n            })\n        })\n    };\n\n    filterView = (value) => {\n        let filter;\n        if (value === 1){\n            filter = 'completed'\n        }\n        else if(value === 2){\n            filter = 'inCompleted'\n        }\n        else {\n            filter = 'all'\n        }\n        this.setState({\n            filterViews: filter\n        })\n    }\n\n    render() {\n        let result;\n\n        if(this.state.filterViews === 'completed'){\n            result = this.state.todos.filter(val=>val.completed === true);\n        }\n        else if( this.state.filterViews === 'inCompleted'){\n            result = this.state.todos.filter(val=>val.completed === false);\n        }\n        else{\n            result = this.state.todos;\n        }\n\n        if (this.state.searchKeyword){\n            result = result.filter((todoItem) =>{\n                return todoItem.title.toLowerCase().includes(this.state.searchKeyword.toLowerCase());\n            });\n        }\n\n\n        return(\n\n            <div className='App Container'>\n                <Header/>\n                <SearchTodo searchItem={this.searchItem}/>\n                <Tabs defaultIndex={0} filterView={this.filterView}>\n                    <Tab label=\"Home\">\n                        <AddTodoList addTodoItem={this.addTodoItem}/>\n                        <TodoList\n                            todos={result}\n                            markComplete={this.markComplete}\n                            deleteItem = {this.deleteTodoItem}\n                        />\n                    </Tab>\n\n                    <Tab label=\"Completed\">\n                        <TodoList\n                            todos={result}\n                            markComplete={this.markComplete}\n                            deleteItem = {this.deleteTodoItem}\n                        />\n                    </Tab>\n\n                    <Tab label=\"InComplete\">\n                        <TodoList\n                            todos={result}\n                            markComplete={this.markComplete}\n                            deleteItem = {this.deleteTodoItem}\n                        />\n                    </Tab>\n                </Tabs>\n                <Footer />\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}